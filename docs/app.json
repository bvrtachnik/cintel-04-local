[{"name": "app.py", "content": "import plotly.express as px\nfrom shiny.express import input, ui, render\nfrom shinywidgets import render_plotly\nfrom palmerpenguins import load_penguins\nfrom shinywidgets import output_widget, render_widget, render_plotly\nimport seaborn as sns\nfrom shiny import render\nimport palmerpenguins\nfrom shiny import reactive\n\n\npenguins_df = load_penguins()\n\n# Set the Page Options with the title \"Brett's Penguin Data\"\nui.page_opts(title=\"Brett's Penguin Data\", fillable=True)\n\n# Sidebar for User Interaction\nwith ui.sidebar(open=\"open\"):\n        ui.h2(\"Sidebar\")\n        ui.input_selectize(\n            \"selected_attribute\",\n            \"Select Attributes\",\n            [\"bill_length_mm\", \"bill_depth_mm\", \"flipper_length_mm\", \"body_mass_g\"],\n            )\n        ui.input_numeric(\n            \"plotly_bin_count\",\n            \"Plotly Number of Bins\",\n            10,\n            min=1,\n            max=20,\n            )\n        ui.input_slider(\n            \"seaborn_bin_count\",\n            \"Seaborn Number of Bins\",\n            min= 5,\n            max= 50,\n            value= 25\n            )\n        ui.input_checkbox_group(\n            \"selected_species_list\",\n            \"Choose Species\",\n            [\"Adelie\",\"Gentoo\",\"Chinstrap\"],\n            selected=[\"Adelie\",\"Gentoo\",\"Chinstrap\"],\n            inline=False\n            )\n        ui.hr()\n        ui.a(\n            \"Brett's GitHub\",\n            href=\"https://github.com/bvrtachnik/cintel-02-data/tree/main\",\n            target=\"_blank\"\n            )\n\nwith ui.layout_columns():\n\n    # Data Table Using Filtered Data    \n    with ui.card():\n        \"Penguins Data Table\"\n        @render.data_frame\n        def data_table():\n            return render.DataTable(filtered_data())\n\n    # Data Grid Using Filtered Data    \n    with ui.card():\n        \"Penguins Data Grid\"\n        @render.data_frame\n        def data_grid():\n            return render.DataGrid(filtered_data())\n\nwith ui.layout_columns():\n    \n    # Plotly Histogram    \n    with ui.card():\n        ui.card_header(\"Plotly Histogram\")\n        @render_plotly\n        def plotlyhistogram():\n            return px.histogram(\n                filtered_data(),\n                x=input.selected_attribute(),\n                nbins=input.plotly_bin_count(),\n                color=\"species\"\n            ).update_layout(\n                xaxis_title=\"Bill length (mm)\",\n                yaxis_title=\"Counts\"\n            )\n            \n    # Seaborn Histogram    \n    with ui.card():\n        ui.card_header(\"Seaborn Histogram\")\n        @render.plot\n        def plot2():\n            ax=sns.histplot(\n                data=filtered_data(), \n                x=input.selected_attribute(), \n                bins=input.seaborn_bin_count(),\n               )\n            ax.set_title(\"Palmer Penguins\")\n            ax.set_xlabel(input.selected_attribute())\n            ax.set_ylabel(\"Number\")\n            return ax\n           \n    # Plotly Scatterplot\n    with ui.card(full_screen=True):\n        ui.card_header(\"Plotly Scatterplot: Species\")\n        @render_plotly\n        def plotly_scatterplot():\n            return px.scatter(\n                filtered_data(),\n                x=\"body_mass_g\",\n                y=\"bill_depth_mm\",\n                color=\"species\",\n                labels={\"body_mass_g\": \"Body Mass (g)\",\n                \"bill_depth_mm\": \"Bill Depth (mm)\"}\n                )\n\n# --------------------------------------------------------\n# Reactive calculations and effects\n# --------------------------------------------------------\n\n# Add a reactive calculation to filter the data\n# By decorating the function with @reactive, we can use the function to filter the data\n# The function will be called whenever an input functions used to generate that output changes.\n# Any output that depends on the reactive function (e.g., filtered_data()) will be updated when the data changes.\n\n\n@reactive.calc\ndef filtered_data():\n    selected_species = input.selected_species_list()\n    if selected_species:\n        return penguins_df[penguins_df['species'].isin(selected_species)]\n    return penguins_df\n", "type": "text"}]